geom_smooth(se = FALSE) +
theme_minimal() + labs(x = "Temperature", y = "Growth Rate") +
facet_wrap(~ SpeciesName,  ncol = 5) +
scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno')
plt
# Base plot with original data points and smoothed line
plt <- df2 %>%
ggplot(aes(x = E1, y = mumax, col = as.factor(E2))) +
geom_point() +
geom_smooth(se = FALSE) +
theme_minimal() +
labs(x = "Temperature", y = "Growth Rate") +
facet_wrap(~ SpeciesName, ncol = 5) +
scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_y_continuous(limits = c(-0.5, 3), breaks = seq(-0.5, 3, by = 0.5))  # Specify y-axis limits and breaks
plt
# Create the fitted sample plot
fitted_sample_plot <- ggplot(final_combined_fitted_values,
aes(x = .row, y = fitted, color = E2)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = E2), alpha = 0.2) +
labs(title = "Fitted Samples Across E2 Values for All Species",
x = "Temperature",
y = "Fitted Samples") +
theme_minimal() +
facet_wrap(~ SpeciesName, ncol = 5) +
scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_y_continuous(limits = c(0, 3), breaks = seq(-0.5, 3, by = 0.5))
# Base plot with original data points and smoothed line
plt <- df2 %>%
ggplot(aes(x = E1, y = mumax, col = as.factor(E2))) +
geom_point() +
geom_smooth(se = FALSE) +
theme_minimal() +
labs(x = "Temperature", y = "Growth Rate") +
facet_wrap(~ SpeciesName, ncol = 5) +
scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_y_continuous(limits = c(0, 3), breaks = seq(-0.5, 3, by = 0.5))  # Specify y-axis limits and breaks
plt / fitted_sample_plot
#### E1
# Initialize lists to store fitted values and samples for all species
all_combined_fitted_values <- list()
all_combined_fitted_samples <- list()
# Loop through each species in nested_gams
for (species_index in seq_along(nested_gams$gams)) {
# Extract the species name and model
selected_species <- nested_gams$SpeciesName[species_index]
m <- nested_gams$gams[[species_index]]
# Prepare the DataFrame for the current species
df_species <- df %>%
filter(SpeciesName == selected_species) %>%
rename(E1 = temperature, E2 = Phosphate_concentration)
# Extract unique E2 values for the current species
e1_values <- df_species %>%
pull(E1) %>%
unique()
# Initialize lists to store fitted values and samples for the current species
all_fitted_values <- list()
all_fitted_samples <- list()
# Loop through each E2 value to get fitted values and samples
for (e1_value in e1_values) {
# Create a new data frame for the current E2 value
new_df <- data_slice(m, E2 = evenly(E2, n = 40)) %>%
mutate(E1 = e1_value) %>%
mutate(.row = row_number())
# Get fitted values for the GAM model
fv <- fitted_values(m, data = new_df)
# Get fitted samples for the GAM model
fs <- fitted_samples(m, data = new_df, n = 10, seed = 4) %>%
left_join(new_df |> select(.row, E2), by = join_by(row == .row)) %>%
mutate(E2 = e1_value)  # Add the current E2 value to the samples
# Store results
all_fitted_values[[as.character(e1_value)]] <- fv
all_fitted_samples[[as.character(e1_value)]] <- fs
}
# Combine all fitted values and samples into data frames for the current species
combined_fitted_values <- bind_rows(all_fitted_values, .id = "E1") %>%
mutate(SpeciesName = selected_species)
combined_fitted_samples <- bind_rows(all_fitted_samples, .id = "E1") %>%
mutate(SpeciesName = selected_species)
# Append to the overall lists
all_combined_fitted_values[[selected_species]] <- combined_fitted_values
all_combined_fitted_samples[[selected_species]] <- combined_fitted_samples
}
# Combine all fitted values and samples across species
final_combined_fitted_values <- bind_rows(all_combined_fitted_values)
final_combined_fitted_samples <- bind_rows(all_combined_fitted_samples)
# Check the structure of the combined data frames
print(colnames(final_combined_fitted_values))
print(colnames(final_combined_fitted_samples))
# Plotting the fitted values for all species
fitted_value_plot <- ggplot(final_combined_fitted_values, aes(x = .row, y = fitted, color = E2, group = interaction(SpeciesName, E2))) +
geom_line() +
labs(title = "Fitted Values Across E1 Values for All Species",
x = "Observation Index",
y = "Fitted Values") +
theme_minimal() +
facet_wrap(~ SpeciesName, scales = "free_y")
print(fitted_value_plot)  # Print fitted values plot
# Plotting the fitted values for all species
fitted_value_plot <- ggplot(final_combined_fitted_values, aes(x = .row, y = fitted, color = as.factor(E2), group = interaction(SpeciesName, E2))) +
geom_line() +
labs(title = "Fitted Values Across E1 Values for All Species",
x = "Observation Index",
y = "Fitted Values") +
theme_minimal() +
facet_wrap(~ SpeciesName, scales = "free_y")
print(fitted_value_plot)  # Print fitted values plot
ggplot(final_combined_fitted_values,
aes(x = .row, y = fitted, color = E2)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = E2), alpha = 0.2) +
labs(title = "Fitted Samples Across E2 Values for All Species",
x = "Temperature",
y = "Fitted Samples") +
theme_minimal() +
facet_wrap(~ SpeciesName, ncol = 5) +
scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_y_continuous(limits = c(0, 3), breaks = seq(-0.5, 3, by = 0.5))
# Plotting the fitted values for all species
fitted_value_plot <- ggplot(final_combined_fitted_values, aes(x = .row, y = fitted, color = as.factor(E1), group = interaction(SpeciesName, E2))) +
geom_line() +
labs(title = "Fitted Values Across E1 Values for All Species",
x = "Observation Index",
y = "Fitted Values") +
theme_minimal() +
facet_wrap(~ SpeciesName, scales = "free_y")
print(fitted_value_plot)  # Print fitted values plot
ggplot(final_combined_fitted_values,
aes(x = .row, y = fitted, color = E1)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = E1), alpha = 0.2) +
labs(title = "Fitted Samples Across E2 Values for All Species",
x = "Temperature",
y = "Fitted Samples") +
theme_minimal() +
facet_wrap(~ SpeciesName, ncol = 5) +
scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_y_continuous(limits = c(0, 3), breaks = seq(-0.5, 3, by = 0.5))
# Plotting the fitted values for all species
fitted_value_plot <- ggplot(final_combined_fitted_values,
aes(x = .row, y = fitted, color = as.factor(E1), group = interaction(SpeciesName, E1))) +
geom_line() +
labs(title = "Fitted Values Across E1 Values for All Species",
x = "Observation Index",
y = "Fitted Values") +
theme_minimal() +
facet_wrap(~ SpeciesName, scales = "free_y")
print(fitted_value_plot)  # Print fitted values plot
# Set E2 as an ordered factor based on the manual order
final_combined_fitted_values <- final_combined_fitted_values %>%
mutate(E1 = factor(E1, levels = manual_order, ordered = TRUE))
# Create the fitted sample plot
fitted_sample_plot <- ggplot(final_combined_fitted_values,
aes(x = .row, y = fitted, color = E1)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = E1), alpha = 0.2) +
labs(title = "Fitted Samples Across E2 Values for All Species",
x = "Temperature",
y = "Fitted Samples") +
theme_minimal() +
facet_wrap(~ SpeciesName, ncol = 5) +
scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_y_continuous(limits = c(0, 3), breaks = seq(-0.5, 3, by = 0.5))
# Print the plot
print(fitted_sample_plot)
final_combined_fitted_values
final_combined_fitted_values
#### E1
# Initialize lists to store fitted values and samples for all species
all_combined_fitted_values <- list()
all_combined_fitted_samples <- list()
# Loop through each species in nested_gams
for (species_index in seq_along(nested_gams$gams)) {
# Extract the species name and model
selected_species <- nested_gams$SpeciesName[species_index]
m <- nested_gams$gams[[species_index]]
# Prepare the DataFrame for the current species
df_species <- df %>%
filter(SpeciesName == selected_species) %>%
rename(E1 = temperature, E2 = Phosphate_concentration)
# Extract unique E2 values for the current species
e1_values <- df_species %>%
pull(E1) %>%
unique()
# Initialize lists to store fitted values and samples for the current species
all_fitted_values <- list()
all_fitted_samples <- list()
# Loop through each E2 value to get fitted values and samples
for (e1_value in e1_values) {
# Create a new data frame for the current E2 value
new_df <- data_slice(m, E2 = evenly(E2, n = 40)) %>%
mutate(E1 = e1_value) %>%
mutate(.row = row_number())
# Get fitted values for the GAM model
fv <- fitted_values(m, data = new_df)
# Get fitted samples for the GAM model
fs <- fitted_samples(m, data = new_df, n = 10, seed = 4) %>%
left_join(new_df |> select(.row, E2), by = join_by(row == .row)) %>%
mutate(E2 = e1_value)  # Add the current E2 value to the samples
# Store results
all_fitted_values[[as.character(e1_value)]] <- fv
all_fitted_samples[[as.character(e1_value)]] <- fs
}
# Combine all fitted values and samples into data frames for the current species
combined_fitted_values <- bind_rows(all_fitted_values, .id = "E1") %>%
mutate(SpeciesName = selected_species)
combined_fitted_samples <- bind_rows(all_fitted_samples, .id = "E1") %>%
mutate(SpeciesName = selected_species)
# Append to the overall lists
all_combined_fitted_values[[selected_species]] <- combined_fitted_values
all_combined_fitted_samples[[selected_species]] <- combined_fitted_samples
}
# Combine all fitted values and samples across species
final_combined_fitted_values <- bind_rows(all_combined_fitted_values)
final_combined_fitted_samples <- bind_rows(all_combined_fitted_samples)
# Check the structure of the combined data frames
print(colnames(final_combined_fitted_values))
print(colnames(final_combined_fitted_samples))
final_combined_fitted_samples
# Plotting the fitted values for all species
fitted_value_plot <- ggplot(final_combined_fitted_values,
aes(x = .row, y = fitted, color = as.factor(E1), group = interaction(SpeciesName, E1))) +
geom_line() +
labs(title = "Fitted Values Across E1 Values for All Species",
x = "Observation Index",
y = "Fitted Values") +
theme_minimal() +
facet_wrap(~ SpeciesName, scales = "free_y")
print(fitted_value_plot)  # Print fitted values plot
# Create the fitted sample plot
fitted_sample_plot <- ggplot(final_combined_fitted_values,
aes(x = .row, y = fitted, color = as.factor(E1))) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = E1), alpha = 0.2) +
labs(title = "Fitted Samples Across E2 Values for All Species",
x = "Temperature",
y = "Fitted Samples") +
theme_minimal() +
facet_wrap(~ SpeciesName, ncol = 5) +
scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_y_continuous(limits = c(0, 3), breaks = seq(-0.5, 3, by = 0.5))
# Print the plot
print(fitted_sample_plot)
# Create the fitted sample plot
fitted_sample_plot <- ggplot(final_combined_fitted_values,
aes(x = .row, y = fitted, color = as.factor(E1))) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = as.factor(E1)), alpha = 0.2) +
labs(title = "Fitted Samples Across E2 Values for All Species",
x = "Temperature",
y = "Fitted Samples") +
theme_minimal() +
facet_wrap(~ SpeciesName, ncol = 5) +
scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_y_continuous(limits = c(0, 3), breaks = seq(-0.5, 3, by = 0.5))
# Print the plot
print(fitted_sample_plot)
# Base plot with original data points and smoothed line
plt <- df2 %>%
ggplot(aes(x = E2, y = mumax, col = as.factor(E1))) +
geom_point() +
geom_smooth(se = FALSE) +
theme_minimal() +
labs(x = "Temperature", y = "Growth Rate") +
facet_wrap(~ SpeciesName, ncol = 5) +
scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_y_continuous(limits = c(0, 3), breaks = seq(-0.5, 3, by = 0.5))  # Specify y-axis limits and breaks
plt / fitted_sample_plot
# Create the fitted sample plot
fitted_sample_plot <- ggplot(final_combined_fitted_values,
aes(x = .row, y = fitted, color = E2)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = E2), alpha = 0.2) +
labs(title = "Fitted Samples Across Phosphate Values for All Species",
x = "Temperature",
y = "Fitted Samples") +
theme_minimal() +
facet_wrap(~ SpeciesName, ncol = 5) +
scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_y_continuous(limits = c(0, 3), breaks = seq(-0.5, 3, by = 0.5))
# Print the plot
print(fitted_sample_plot)
# Create the fitted sample plot
fitted_sample_plot <- ggplot(final_combined_fitted_values,
aes(x = .row, y = fitted, color = as.factor(E1))) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = as.factor(E1)), alpha = 0.2) +
labs(title = "Fitted Samples Across Temperature Values for All Species",
x = "Phosphate concentration",
y = "Fitted Samples") +
theme_minimal() +
facet_wrap(~ SpeciesName, ncol = 5) +
scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_y_continuous(limits = c(0, 3), breaks = seq(0, 3, by = 0.5))
# Print the plot
print(fitted_sample_plot)
df2 <- df %>%
rename(E1 = temperature, E2 = Phosphate_concentration)
# Base plot with original data points and smoothed line
plt <- df2 %>%
ggplot(aes(x = E2, y = mumax, col = as.factor(E1))) +
geom_point() +
geom_smooth(se = FALSE) +
theme_minimal() +
labs(title = "Measured values", x = "Temperature", y = "Growth Rate") +
facet_wrap(~ SpeciesName, ncol = 5) +
scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_y_continuous(limits = c(0, 3), breaks = seq(0, 3, by = 0.5))  # Specify y-axis limits and breaks
plt / fitted_sample_plot
#### E1
# Initialize lists to store fitted values and samples for all species
all_combined_fitted_values <- list()
all_combined_fitted_samples <- list()
# Loop through each species in nested_gams
for (species_index in seq_along(nested_gams$gams)) {
# Extract the species name and model
selected_species <- nested_gams$SpeciesName[species_index]
m <- nested_gams$gams[[species_index]]
# Prepare the DataFrame for the current species
df_species <- df %>%
filter(SpeciesName == selected_species) %>%
rename(E1 = temperature, E2 = Phosphate_concentration)
# Extract unique E2 values for the current species
e1_values <- df_species %>%
pull(E1) %>%
unique()
# Initialize lists to store fitted values and samples for the current species
all_fitted_values <- list()
all_fitted_samples <- list()
# Loop through each E2 value to get fitted values and samples
for (e1_value in e1_values) {
# Create a new data frame for the current E2 value
new_df <- data_slice(m, E2 = evenly(E2, n = 40)) %>%
mutate(E1 = e1_value) %>%
mutate(.row = row_number())
# Get fitted values for the GAM model
fv <- fitted_values(m, data = new_df)
# Get fitted samples for the GAM model
fs <- fitted_samples(m, data = new_df, n = 10, seed = 4) %>%
left_join(new_df |> select(.row, E2), by = join_by(row == .row)) %>%
mutate(E2 = e1_value)  # Add the current E2 value to the samples
# Store results
all_fitted_values[[as.character(e1_value)]] <- fv
all_fitted_samples[[as.character(e1_value)]] <- fs
}
# Combine all fitted values and samples into data frames for the current species
combined_fitted_values <- bind_rows(all_fitted_values, .id = "E1") %>%
mutate(SpeciesName = selected_species)
combined_fitted_samples <- bind_rows(all_fitted_samples, .id = "E1") %>%
mutate(SpeciesName = selected_species)
# Append to the overall lists
all_combined_fitted_values[[selected_species]] <- combined_fitted_values
all_combined_fitted_samples[[selected_species]] <- combined_fitted_samples
}
# Loop through each species in nested_gams
for (species_index in seq_along(nested_gams$gams)) {
# Extract the species name and model
selected_species <- nested_gams$SpeciesName[species_index]
m <- nested_gams$gams[[species_index]]
# Prepare the DataFrame for the current species
df_species <- df %>%
filter(SpeciesName == selected_species) %>%
rename(E1 = temperature, E2 = Phosphate_concentration)
# Extract unique E2 values for the current species
e1_values <- df_species %>%
pull(E1) %>%
unique()
# Initialize lists to store fitted values and samples for the current species
all_fitted_values <- list()
all_fitted_samples <- list()
# Loop through each E2 value to get fitted values and samples
for (e1_value in e1_values) {
# Create a new data frame for the current E2 value
new_df <- data_slice(m, E2 = evenly(E2, n = 40)) %>%
mutate(E1 = e1_value) %>%
mutate(.row = row_number())
# Get fitted values for the GAM model
fv <- fitted_values(m, data = new_df)
# Get fitted samples for the GAM model
fs <- fitted_samples(m, data = new_df, n = 10, seed = 4) %>%
left_join(new_df |> select(.row, E2), by = join_by(row == .row)) %>%
mutate(E2 = e1_value)  # Add the current E2 value to the samples
# Store results
all_fitted_values[[as.character(e1_value)]] <- fv
all_fitted_samples[[as.character(e1_value)]] <- fs
}
# Combine all fitted values and samples into data frames for the current species
combined_fitted_values <- bind_rows(all_fitted_values, .id = "E1") %>%
mutate(SpeciesName = selected_species)
combined_fitted_samples <- bind_rows(all_fitted_samples, .id = "E1") %>%
mutate(SpeciesName = selected_species)
# Append to the overall lists
all_combined_fitted_values[[selected_species]] <- combined_fitted_values
all_combined_fitted_samples[[selected_species]] <- combined_fitted_samples
}
# Combine all fitted values and samples across species
final_combined_fitted_values <- bind_rows(all_combined_fitted_values)
final_combined_fitted_samples <- bind_rows(all_combined_fitted_samples)
# Create the fitted sample plot
fitted_sample_plot <- ggplot(final_combined_fitted_values,
aes(x = .row, y = fitted, color = as.factor(E1))) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = as.factor(E1)), alpha = 0.2) +
labs(title = "Fitted Samples Across Temperature Values for All Species",
x = "Phosphate concentration",
y = "Fitted Samples") +
theme_minimal() +
facet_wrap(~ SpeciesName, ncol = 5) +
scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_y_continuous(limits = c(0, 3), breaks = seq(0, 3, by = 0.5))
plt / fitted_sample_plot
# Create the fitted sample plot
fitted_sample_plot <- ggplot(final_combined_fitted_values,
aes(x = .row, y = fitted, color = as.factor(E1))) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = as.factor(E1)), alpha = 0.2) +
labs(title = "Fitted Samples Across Temperature Values for All Species",
x = "Phosphate concentration",
y = "Fitted Samples") +
theme_minimal() +
facet_wrap(~ SpeciesName, ncol = 5) +
scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_y_continuous(limits = c(0, 3), breaks = seq(0, 3, by = 0.5))+
theme(legend.position = "bottom")
df2 <- df %>%
rename(E1 = temperature, E2 = Phosphate_concentration)
# Base plot with original data points and smoothed line
plt <- df2 %>%
ggplot(aes(x = E2, y = mumax, col = as.factor(E1))) +
geom_point() +
geom_smooth(se = FALSE) +
theme_minimal() +
labs(title = "Measured values", x = "Phosphate", y = "Growth Rate") +
facet_wrap(~ SpeciesName, ncol = 5) +
scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
theme(legend.position = "bottom") +
scale_y_continuous(limits = c(0, 3), breaks = seq(0, 3, by = 0.5))  # Specify y-axis limits and breaks
plt / fitted_sample_plot
# Base plot with original data points and smoothed line
plt <- df2 %>%
ggplot(aes(x = E2, y = mumax, col = as.factor(E1))) +
geom_point() +
geom_smooth(se = FALSE) +
theme_minimal() +
labs(title = "Measured values", x = "Phosphate", y = "Growth Rate") +
facet_wrap(~ SpeciesName, ncol = 5) +
scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
theme(legend.position = "bottom",
legend.box = "horizontal",   # Ensure legend items are in a single row
legend.justification = "center") +
scale_y_continuous(limits = c(0, 3), breaks = seq(0, 3, by = 0.5))  # Specify y-axis limits and breaks
plt
# Base plot with original data points and smoothed line
plt <- df2 %>%
ggplot(aes(x = E2, y = mumax, col = as.factor(E1))) +
geom_point() +
geom_smooth(se = FALSE) +
theme_minimal() +
labs(title = "Measured values", x = "Phosphate", y = "Growth Rate") +
facet_wrap(~ SpeciesName, ncol = 5) +
scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
theme(legend.position = "bottom",
legend.box = "horizontal",   # Ensure legend items are in a single row
legend.justification = "center",
legend.spacing.x = unit(0.5, 'cm'),  # Adjust spacing if needed
legend.key.size = unit(1, 'cm')) +
scale_y_continuous(limits = c(0, 3), breaks = seq(0, 3, by = 0.5))  # Specify y-axis limits and breaks
plt
# Base plot with original data points and smoothed line
plt <- df2 %>%
ggplot(aes(x = E2, y = mumax, col = as.factor(E1))) +
geom_point() +
geom_smooth(se = FALSE) +
theme_minimal() +
labs(title = "Measured values", x = "Phosphate", y = "Growth Rate") +
facet_wrap(~ SpeciesName, ncol = 5) +
scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
theme(legend.position = "bottom",
legend.box = "horizontal") +
scale_y_continuous(limits = c(0, 3), breaks = seq(0, 3, by = 0.5))  # Specify y-axis limits and breaks
plt
p2
p1 <-  draw(m_Ankistrodesmus, rug = FALSE, dist = 0.5) &
geom_hline(yintercept = E2_p, size =1) &
geom_vline(xintercept = E1_p, size = 1) &
labs(x = "Temperature °C", y = "Phosphate concentration (μmol L−1)",title = "", caption = '', tag = "(a)")
p2 <- p2 + labs(tag = "(b)")
p3 <- p3 + labs(tag = "(c)")
p4 <- p4 + labs(tag = "(d)")
p5 <- p5 + labs(tag = "(e)")
p_partials <- wrap_plots(p1, p2, p3, p5, p6)
p_partials
