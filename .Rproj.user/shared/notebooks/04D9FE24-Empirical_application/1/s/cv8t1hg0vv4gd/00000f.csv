"0","library(viridis)"
"2","Loading required package: viridisLite
"
"2","
Attaching package: â€˜viridisâ€™

"
"2","The following object is masked from â€˜package:scalesâ€™:

    viridis_pal

"
"0","## community 1 "
"0","nested_gams1 <- nested_gams %>% filter(SpeciesName == c(""Ankistrodesmus"" , ""Chlamydomonas"", ""Monoraphidium""))"
"0","#list of gams"
"0","m_list <- (nested_gams1$gams)"
"0","#list of spp names"
"0","my_spp_names <- (nested_gams1$SpeciesName)"
"0",""
"0","#refs <- new_data"
"0","### Function "
"0","get_partials <- function(m, refs) {"
"0","  refs$pd_E1 <- NA"
"0","  refs$pd_E2 <- NA"
"0","  for(i in 1:nrow(refs)) {"
"0","    refs$pd_E1[i] <- partial_derivatives(m,"
"0","                                        data = refs[i,],"
"0","                                        type = ""central"","
"0","                                        focal = ""E1"")$partial_deriv"
"0","    refs$pd_E2[i] <- partial_derivatives(m,"
"0","                                        data = refs[i,],"
"0","                                        type = ""central"","
"0","                                        focal = ""E2"")$partial_deriv"
"0","  }"
"0","  refs"
"0","}"
"0",""
"0","refs1 <- crossing(E1 = seq(15, 40, length = 20),"
"0","                  E2 = seq(0.01, 30, length = 20))"
"0","# get partial derivatives"
"0","pd_list <- modify_depth(m_list, 1, ~ get_partials(., refs1))"
"0",""
"0","# from list to tibble"
"0","pd_spp <- tibble("
"0","  E1_ref = map(pd_list, ""E1""),"
"0","  E2_ref = map(pd_list, ""E2""),"
"0","  pd_E1 = map(pd_list, ""pd_E1""),"
"0","  pd_E2 = map(pd_list, ""pd_E2"")) %>%"
"0","  dplyr::mutate(sp = my_spp_names) %>%"
"0","  relocate(sp, E1_ref, E2_ref, pd_E1, pd_E2) %>%"
"0","  unnest(E1_ref, E2_ref, pd_E1, pd_E2)"
"0",""
"0",""
"0",""
"0","radius <- 1"
"0","num_arrows <- 1000"
"0",""
"0","pd_spp <- tibble(angle = rep(seq(0, 2*pi, length = num_arrows), nrow(pd_spp))) %>%"
"0","  mutate(E1_ref = rep(pd_spp$E1_ref, each = num_arrows),"
"0","         E2_ref = rep(pd_spp$E2_ref, each = num_arrows)) %>%"
"0","  full_join(pd_spp) %>%"
"0","  mutate(E1 = cos(angle) * radius,"
"0","         E2 = sin(angle) * radius,"
"0","         dir_deriv = E1 * pd_E1 + E2 * pd_E2,"
"0","         unit_vec_mag = sqrt(E1^2 + E2^2))"
"1","[38;5;250mJoining with `by = join_by(E1_ref, E2_ref)`[39m
"
"0","# filter useless stuff"
"0","pd_spp <- pd_spp %>% "
"0","  dplyr::select(angle, sp, E1_ref, E2_ref, dir_deriv)"
"0",""
"0","#"
"0","# Calculating diversity for each direction and location this should be always the first step"
"0","# Dissimilarity"
"0","Div_loc_dir <- pd_spp %>% "
"0","  dplyr::group_by(E1_ref, E2_ref, angle) %>% "
"0","  summarise(div = resp_div(dir_deriv, sign = T))"
"1","[38;5;250m`summarise()` has grouped output by 'E1_ref', 'E2_ref'. You can override using the `.groups` argument.[39m
"
"0","RDiv <- tibble(Div_loc_dir %>% dplyr::group_by(E1_ref, E2_ref) %>% "
"0","                 summarise(mean = mean(div)))"
"1","[38;5;250m`summarise()` has grouped output by 'E1_ref'. You can override using the `.groups` argument.[39m
"
"0","m_RD <- gam(mean ~ te(E1_ref, E2_ref, k = c(5, 5)),"
"0","            data = RDiv,"
"0","            method = ""REML"")"
"0",""
"0",""
"0","RDiv$predicted_mean <- predict(m_RD, newdata = RDiv, type = ""response"")"
"0","# Generate grid of E1_ref and E2_ref values"
"0","e1_values <- seq(min(RDiv$E1_ref), max(RDiv$E1_ref), length.out = 100)"
"0","e2_values <- seq(min(RDiv$E2_ref), max(RDiv$E2_ref), length.out = 100)"
"0","grid <- expand.grid(E1_ref = e1_values, E2_ref = e2_values)"
"0",""
"0","# Predict mean values on the grid"
"0","grid$pred_mean <- predict(m_RD, newdata = grid, type = ""response"")"
"0","library(ggsci)"
"0",""
"0","# Plot predicted surface with colored background and black contour lines"
"0","capacity_divergence1 <- ggplot(grid, aes(x = E1_ref, y = E2_ref, z = pred_mean, fill = pred_mean)) +"
"0","  geom_tile(aes(fill = pred_mean)) +"
"0","  geom_contour(color = ""black"", linetype = ""solid"") +"
"0","  scale_fill_viridis(option = ""inferno"", alpha = 0.85) +  # Use cm.colors palette with 100 colors"
"0","  labs(tag = ""(a)"","
"0","       x = ""Temperature Â°C"", y = ""Phosphate concentration (Î¼mol Lâˆ’1)"", title = ""Community 1"", fill = """") +"
"0","  theme_classic() +"
"0","  theme(legend.position = ""none"") +"
"0","  theme("
"0","    text = element_text(size = 30),  # Set the size of all text"
"0","    title = element_text(size = 30),  # Set the size of titles"
"0","    axis.title = element_text(size = 25),  # Set the size of axis titles"
"0","    axis.text = element_text(size = 25),  # Set the size of axis labels"
"0","    axis.ticks = element_line(size = 0.5),  # Set the size of axis ticks"
"0","    legend.title = element_text(size = 30),  # Set the size of legend title"
"0","    legend.text = element_text(size = 20),"
"0","    legend.key.size = unit(2.5, ""lines""))  +"
"0","  theme("
"0","    axis.text = element_text(color = ""black""),  # Set axis text to black"
"0","    axis.ticks = element_line(color = ""black"")  # Set axis ticks to black"
"0","  )"
"0",""
