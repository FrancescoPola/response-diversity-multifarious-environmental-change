
df_1 <- df %>%  filter(SpeciesName == "Ankistrodesmus") %>% 
  rename(E1 = temperature,
         E2 = Phosphate_concentration) 

plt <-  df_1%>% filter(E2 == 2) %>% 
  ggplot( aes(x = E1, y = (mumax))) +
  geom_point()+
  geom_smooth(se = FALSE) +
  facet_wrap(~SpeciesName, ncol = 5) +
  theme_bw(base_size = 20)+
  labs(x = "Temperature °C", y = "growth rate", tag = "(a)")


m <- nested_gams$gams[[1]]

new_df <- data_slice(m, E1 = evenly(E1, n = 200)) |>
  mutate(.row = row_number())

fv <- fitted_values(m, data = new_df)

fs <- fitted_samples(m, data = new_df, n = 10, seed = 4) |>
  left_join(new_df |> select(.row, E1), by = join_by(row == .row))



plt +
geom_ribbon(data = fv, aes(y = fitted, ymin = lower, ymax = upper),
            fill = "red", alpha = 0.3) +
  geom_line(data = fs, aes(group = draw, x = E1, y = fitted),
            colour = "yellow", alpha = 0.4)



library(dplyr)
library(ggplot2)
library(viridis)  # for color scale
library(gratia)   # for fitted_values and fitted_samples
library(purrr)    # for map functions

# Filter for the specific species
df_1 <- df %>% 
  filter(SpeciesName == "Ankistrodesmus") %>% 
  rename(E1 = temperature, E2 = Phosphate_concentration)

# Plot original data points with smoothed line
plt <- df_1 %>% 
  ggplot(aes(x = E1, y = mumax, col = as.factor(E2))) +
  geom_point() +
  geom_smooth(se = FALSE) +
  facet_wrap(~SpeciesName, ncol = 5) +
  theme_bw(base_size = 20) +
  scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
  labs(x = "Temperature °C", y = "Growth Rate", tag = "(a)")

print(plt)  # Print the original plot

# Extract the model for the selected species
m <- nested_gams$gams[[1]]

# Extract unique E2 values for the selected species
e2_values <- df_1 %>%
  pull(E2) %>%
  unique()

# Initialize lists to store fitted values and samples
all_fitted_values <- list()
all_fitted_samples <- list()

# Loop through each E2 value to get fitted values and samples
for (e2_value in e2_values) {
  
  # Create a new data frame for the current E2 value
  new_df <- data_slice(m, E1 = evenly(E1, n = 200)) %>%
    mutate(E2 = e2_value) %>%
    mutate(.row = row_number())
  
  # Get fitted values for the GAM model
  fv <- fitted_values(m, data = new_df)
  
  # Get fitted samples for the GAM model
  fs <- fitted_samples(m, data = new_df, n = 10, seed = 4) %>%
    left_join(new_df |> select(.row, E1), by = join_by(row == .row)) %>%
    mutate(E2 = e2_value)  # Add the current E2 value to the samples
  
  # Store results
  all_fitted_values[[as.character(e2_value)]] <- fv
  all_fitted_samples[[as.character(e2_value)]] <- fs
}

# Combine all fitted values and samples into data frames
combined_fitted_values <- bind_rows(all_fitted_values, .id = "E2")
combined_fitted_samples <- bind_rows(all_fitted_samples, .id = "E2")

# Check the structure of the combined data frames
print(colnames(combined_fitted_values))
print(colnames(combined_fitted_samples))

# Plotting the fitted values
fitted_value_plot <- ggplot(combined_fitted_values, aes(x = .row, y = fitted, color = E2)) +
  geom_line() +
  labs(title = "Fitted Values Across E2 Values",
       x = "Observation Index",
       y = "Fitted Values") +
  theme_minimal()

print(fitted_value_plot)  # Print fitted values plot

# Plotting the fitted samples
fitted_sample_plot <- ggplot(combined_fitted_values, aes(x = .row, y = fitted, color = E2)) +
  geom_line() +
  geom_ribbon(aes(ymin = lower, ymax = upper, fill = E2), alpha = 0.2) +
  labs(title = "Fitted Samples Across E2 Values",
       x = "Observation Index",
       y = "Fitted Samples") +
  theme_minimal()

print(fitted_sample_plot)  # Print fitted samples plot
plt + ggplot(combined_fitted_values, aes(x = .row, y = fitted, color = E2)) +
  geom_line() +
  geom_ribbon(aes(ymin = lower, ymax = upper, fill = E2), alpha = 0.2) +
  labs(title = "Fitted Samples Across E2 Values",
       x = "Observation Index",
       y = "Fitted Samples") +
  theme_minimal()



library(dplyr)
library(ggplot2)
library(viridis)  # for color scale
library(gratia)   # for fitted_values and fitted_samples
library(purrr)    # for map functions

# Initialize lists to store fitted values and samples for all species
all_combined_fitted_values <- list()
all_combined_fitted_samples <- list()

# Loop through each species in nested_gams
for (species_index in seq_along(nested_gams$gams)) {
  
  # Extract the species name and model
  selected_species <- nested_gams$SpeciesName[species_index]
  m <- nested_gams$gams[[species_index]]
  
  # Prepare the DataFrame for the current species
  df_species <- df %>% 
    filter(SpeciesName == selected_species) %>% 
    rename(E1 = temperature, E2 = Phosphate_concentration)
  
  # Extract unique E2 values for the current species
  e2_values <- df_species %>%
    pull(E2) %>%
    unique()
  
  # Initialize lists to store fitted values and samples for the current species
  all_fitted_values <- list()
  all_fitted_samples <- list()
  
  # Loop through each E2 value to get fitted values and samples
  for (e2_value in e2_values) {
    
    # Create a new data frame for the current E2 value
    new_df <- data_slice(m, E1 = evenly(E1, n = 40)) %>%
      mutate(E2 = e2_value) %>%
      mutate(.row = row_number())
    
    # Get fitted values for the GAM model
    fv <- fitted_values(m, data = new_df)
    
    # Get fitted samples for the GAM model
    fs <- fitted_samples(m, data = new_df, n = 10, seed = 4) %>%
      left_join(new_df |> select(.row, E1), by = join_by(row == .row)) %>%
      mutate(E2 = e2_value)  # Add the current E2 value to the samples
    
    # Store results
    all_fitted_values[[as.character(e2_value)]] <- fv
    all_fitted_samples[[as.character(e2_value)]] <- fs
  }
  
  # Combine all fitted values and samples into data frames for the current species
  combined_fitted_values <- bind_rows(all_fitted_values, .id = "E2") %>%
    mutate(SpeciesName = selected_species)
  
  combined_fitted_samples <- bind_rows(all_fitted_samples, .id = "E2") %>%
    mutate(SpeciesName = selected_species)
  
  # Append to the overall lists
  all_combined_fitted_values[[selected_species]] <- combined_fitted_values
  all_combined_fitted_samples[[selected_species]] <- combined_fitted_samples
}

# Combine all fitted values and samples across species
final_combined_fitted_values <- bind_rows(all_combined_fitted_values)
final_combined_fitted_samples <- bind_rows(all_combined_fitted_samples)

# Check the structure of the combined data frames
print(colnames(final_combined_fitted_values))
print(colnames(final_combined_fitted_samples))

# Plotting the fitted values for all species
fitted_value_plot <- ggplot(final_combined_fitted_values, aes(x = .row, y = fitted, color = E2, group = interaction(SpeciesName, E2))) +
  geom_line() +
  labs(title = "Fitted Values Across Phosphate for All Species",
       x = "Observation Index",
       y = "Fitted Values") +
  theme_minimal() +
  facet_wrap(~ SpeciesName, scales = "free_y")

print(fitted_value_plot)  # Print fitted values plot

# Define the manual order for E2 values
manual_order <- c(0.01, 0.1, 0.5, 1, 2, 4, 6, 8, 10, 20, 30, 40)

# Set E2 as an ordered factor based on the manual order
final_combined_fitted_values <- final_combined_fitted_values %>%
  mutate(E2 = factor(E2, levels = manual_order, ordered = TRUE))

# Create the fitted sample plot
fitted_sample_plot <- ggplot(final_combined_fitted_values, 
                             aes(x = .row, y = fitted, color = E2)) +
  geom_line() +
  geom_ribbon(aes(ymin = lower, ymax = upper, fill = E2), alpha = 0.2) +
  labs(title = "Fitted Samples Across Phosphate Values for All Species",
       x = "Temperature",
       y = "Fitted Samples") +
  theme_minimal() +
  facet_wrap(~ SpeciesName, ncol = 5) +
  scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
  scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
  scale_y_continuous(limits = c(0, 3), breaks = seq(-0.5, 3, by = 0.5))

# Print the plot
print(fitted_sample_plot)




df2 <- df %>% 
  rename(E1 = temperature, E2 = Phosphate_concentration)
# Base plot with original data points and smoothed line
plt <- df2 %>% 
  ggplot(aes(x = E1, y = mumax, col = as.factor(E2))) +
  geom_point() +
  geom_smooth(se = FALSE) +
  theme_minimal() + 
  labs(x = "Temperature", y = "Growth Rate") +
  facet_wrap(~ SpeciesName, ncol = 5) +
  scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
  scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
  scale_y_continuous(limits = c(0, 3), breaks = seq(-0.5, 3, by = 0.5))  # Specify y-axis limits and breaks

plt / fitted_sample_plot




#### E1
# Initialize lists to store fitted values and samples for all species
all_combined_fitted_values <- list()
all_combined_fitted_samples <- list()

# Loop through each species in nested_gams
for (species_index in seq_along(nested_gams$gams)) {
  
  # Extract the species name and model
  selected_species <- nested_gams$SpeciesName[species_index]
  m <- nested_gams$gams[[species_index]]
  
  # Prepare the DataFrame for the current species
  df_species <- df %>% 
    filter(SpeciesName == selected_species) %>% 
    rename(E1 = temperature, E2 = Phosphate_concentration)
  
  # Extract unique E2 values for the current species
  e1_values <- df_species %>%
    pull(E1) %>%
    unique()
  
  # Initialize lists to store fitted values and samples for the current species
  all_fitted_values <- list()
  all_fitted_samples <- list()
  
  # Loop through each E2 value to get fitted values and samples
  for (e1_value in e1_values) {
    
    # Create a new data frame for the current E2 value
    new_df <- data_slice(m, E2 = evenly(E2, n = 40)) %>%
      mutate(E1 = e1_value) %>%
      mutate(.row = row_number())
    
    # Get fitted values for the GAM model
    fv <- fitted_values(m, data = new_df)
    
    # Get fitted samples for the GAM model
    fs <- fitted_samples(m, data = new_df, n = 10, seed = 4) %>%
      left_join(new_df |> select(.row, E2), by = join_by(row == .row)) %>%
      mutate(E2 = e1_value)  # Add the current E2 value to the samples
    
    # Store results
    all_fitted_values[[as.character(e1_value)]] <- fv
    all_fitted_samples[[as.character(e1_value)]] <- fs
  }
  
  # Combine all fitted values and samples into data frames for the current species
  combined_fitted_values <- bind_rows(all_fitted_values, .id = "E1") %>%
    mutate(SpeciesName = selected_species)
  
  combined_fitted_samples <- bind_rows(all_fitted_samples, .id = "E1") %>%
    mutate(SpeciesName = selected_species)
  
  # Append to the overall lists
  all_combined_fitted_values[[selected_species]] <- combined_fitted_values
  all_combined_fitted_samples[[selected_species]] <- combined_fitted_samples
}

# Combine all fitted values and samples across species
final_combined_fitted_values <- bind_rows(all_combined_fitted_values)
final_combined_fitted_samples <- bind_rows(all_combined_fitted_samples)

# Check the structure of the combined data frames
print(colnames(final_combined_fitted_values))
print(colnames(final_combined_fitted_samples))

# Plotting the fitted values for all species
fitted_value_plot <- ggplot(final_combined_fitted_values, 
                            aes(x = .row, y = fitted, color = as.factor(E1), group = interaction(SpeciesName, E1))) +
  geom_line() +
  labs(title = "Fitted Values Across E1 Values for All Species",
       x = "Observation Index",
       y = "Fitted Values") +
  theme_minimal() +
  facet_wrap(~ SpeciesName, scales = "free_y")

print(fitted_value_plot)  # Print fitted values plot



# Set E2 as an ordered factor based on the manual order
final_combined_fitted_values <- final_combined_fitted_values %>%
  mutate(E1 = factor(E1, levels = manual_order, ordered = TRUE))

# Create the fitted sample plot
fitted_sample_plot <- ggplot(final_combined_fitted_values, 
                             aes(x = .row, y = fitted, color = as.factor(E1))) +
  geom_line() +
  geom_ribbon(aes(ymin = lower, ymax = upper, fill = as.factor(E1)), alpha = 0.2) +
  labs(title = "Fitted Samples Across Temperature Values for All Species",
       x = "Phosphate concentration",
       y = "Fitted Samples") +
  theme_minimal() +
  facet_wrap(~ SpeciesName, ncol = 5) +
  scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
  scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
  scale_y_continuous(limits = c(0, 3), breaks = seq(0, 3, by = 0.5))

# Print the plot
print(fitted_sample_plot)




df2 <- df %>% 
  rename(E1 = temperature, E2 = Phosphate_concentration)
# Base plot with original data points and smoothed line
plt <- df2 %>% 
  ggplot(aes(x = E2, y = mumax, col = as.factor(E1))) +
  geom_point() +
  geom_smooth(se = FALSE) +
  theme_minimal() + 
  labs(title = "Measured values", x = "Temperature", y = "Growth Rate") +
  facet_wrap(~ SpeciesName, ncol = 5) +
  scale_color_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
  scale_fill_viridis_d(end = 0.2, begin = 0.9, option = 'inferno') +
  scale_y_continuous(limits = c(0, 3), breaks = seq(0, 3, by = 0.5))  # Specify y-axis limits and breaks

plt / fitted_sample_plot


